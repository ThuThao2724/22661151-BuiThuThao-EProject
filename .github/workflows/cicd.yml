name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:

  test:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:6
        ports: [ "27017:27017" ]
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })' || exit 1"
          --health-interval=5s --health-timeout=5s --health-retries=20
      rabbitmq:
        image: rabbitmq:3-management
        ports: [ "5672:5672", "15672:15672" ]
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=5s --health-timeout=5s --health-retries=20

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install & Test auth
        working-directory: ./auth
        run: |
          npm ci
          npm test --if-present

      - name: Install & Test product
        working-directory: ./product
        run: |
          npm ci
          npm test --if-present


  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth, product, order]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64


  deploy:
    needs: build-and-push
    runs-on: self-hosted
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    steps:
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - shell: cmd
        run: |
          cd /d D:\EProject-Phase-1
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d --remove-orphans
